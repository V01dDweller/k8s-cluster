# file: k8s_install.yml
---
- name: Install kubectl locally
  hosts: localhost
  connection: local
  gather_facts: false
  become: true
  tasks:
    - name: Retrieving kubectl latest stable version
      ansible.builtin.uri:
        url: https://dl.k8s.io/release/stable.txt
        method: GET
        return_content: true
      register: kubectl_version

    - name: Displaying kubectl latest stable version
      ansible.builtin.debug:
        msg: Lastest kubectl version is {{ kubectl_version.content }}

    - name: Downloading /usr/local/bin/kubectl {{ kubectl_version.content }}
      ansible.builtin.get_url:
        url: https://dl.k8s.io/release/{{ kubectl_version.content }}/bin/linux/amd64/kubectl
        dest: /usr/local/bin/kubectl
        mode: '0755'
        owner: root
        group: root

- name: Installing Containerd, Docker and Kubernetes tools
  hosts: all
  become: true
  gather_facts: false
  roles:
    - role: hosts_update
      tags:
        - hosts

    - role: ipv6_disable
      tags:
        - ipv6

    - role: containerd_install
      tags:
        - containerd

    - role: docker_install
      tags:
        - docker
        - packages

  post_tasks:
    - name: Setting time zone Americas/New_York
      community.general.timezone:
        name: America/New_York
      tags: timezone

    - name: Adding Kubernetes signing key
      ansible.builtin.apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        keyring: /usr/share/keyrings/kubernetes.gpg
        state: present
      tags: packages

    - name: Adding Kubernetes repository
      ansible.builtin.apt_repository:
        repo: deb [arch=amd64 signed-by=/usr/share/keyrings/kubernetes.gpg] http://apt.kubernetes.io/ kubernetes-xenial main
        state: present
        filename: kubernetes.list
      tags: packages

    - name: Setting kubernetes_packages fact
      ansible.builtin.set_fact:
        kubernetes_packages:
          - kubelet
          - kubeadm
          - kubectl
      tags: packages

    - name: Installing kubeadm kubelet and kubectl
      ansible.builtin.apt:
        name: '{{ kubernetes_packages }}'
        state: present
        update_cache: true
      tags: packages

    - name: Issuing apt-mark hold on kubeadm kubelet and kubectl
      ansible.builtin.dpkg_selections:
        name: '{{ package }}'
        selection: hold
      loop: '{{ kubernetes_packages }}'
      loop_control:
        loop_var: package
        label: Holding {{ package }} package
      tags: packages

    - name: Creating /etc/sysctl.d/kubernetes.conf
      ansible.builtin.copy:
        content: |
          net.bridge.bridge-nf-call-ip6tables = 1
          net.bridge.bridge-nf-call-iptables = 1
          net.ipv4.ip_forward = 1
        dest: /etc/sysctl.d/kubernetes.conf
        owner: root
        group: root
        mode: '0644'
      notify: Reload sysctl

  handlers:
    - name: Issue modprobe overlay
      ansible.builtin.command: modprobe overlay
      changed_when: false

    - name: Reload sysctl
      ansible.builtin.command: sysctl --system
      changed_when: false

- name: Configure the master
  hosts: k8s-master
  become: true
  gather_facts: false
  tags: master
  tasks:
    - name: Creating /etc/default/kubelet
      ansible.builtin.copy:
        content: |
          KUBELET_EXTRA_ARGS="--cgroup-driver=cgroupfs"
        dest: /etc/default/kubelet
        owner: root
        group: root
        mode: '0644'
      notify: Restart kubelet

    - name: Updating /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
      ansible.builtin.copy:
        content: |
          # Note: This dropin only works with kubeadm and kubelet v1.11+
          [Service]
          Environment="KUBELET_KUBECONFIG_ARGS=--bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf"
          Environment="KUBELET_CONFIG_ARGS=--config=/var/lib/kubelet/config.yaml"
          Environment="KUBELET_EXTRA_ARGS=--fail-swap-on=false"
          # This is a file that "kubeadm init" and "kubeadm join" generates at runtime, populating the KUBELET_KUBEADM_ARGS variable dynamically
          EnvironmentFile=-/var/lib/kubelet/kubeadm-flags.env
          # This is a file that the user can use for overrides of the kubelet args as a last resort. Preferably, the user should use
          # the .NodeRegistration.KubeletExtraArgs object in the configuration files instead. KUBELET_EXTRA_ARGS should be sourced from this file.
          EnvironmentFile=-/etc/default/kubelet
          ExecStart=
          ExecStart=/usr/bin/kubelet $KUBELET_KUBECONFIG_ARGS $KUBELET_CONFIG_ARGS $KUBELET_KUBEADM_ARGS $KUBELET_EXTRA_ARGS
        dest: /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
        owner: root
        group: root
        mode: '0644'
      notify: Restart kubelet

    - name: Saving the master hostname from the inventory
      ansible.builtin.set_fact:
        master_hostname: "{{ hostvars[groups['master'][0]].ansible_host }}"

    - name: Who's da master?
      ansible.builtin.debug:
        msg: The master is {{ master_hostname }}

    - name: Initializing the cluster via kubeadmin
      ansible.builtin.shell: |
        set -o pipefail
        kubeadm init \
        --pod-network-cidr=10.244.0.0/16 \
        --control-plane-endpoint={{ master_hostname }} \
        --apiserver-advertise-address={{ master_hostname }} \
      args:
        executable: /bin/bash
        creates: /etc/kubernetes/admin.conf
      register: kubeadm_init

    - name: Displaying kubeadm init output
      ansible.builtin.debug:
        msg: '{{ kubeadm_init.stdout }}'

    - name: Creating $HOME/.kube
      ansible.builtin.file:
        path: /home/{{ ansible_user }}/.kube
        state: directory
        owner: '{{ ansible_user }}'
        group: '{{ ansible_user }}'
        mode: '0755'

    - name: Creating $HOME/.kube admin.conf
      ansible.builtin.copy:
        src: /etc/kubernetes/admin.conf
        remote_src: true
        dest: /home/{{ ansible_user }}/.kube/config
        owner: '{{ ansible_user }}'
        group: '{{ ansible_user }}'
        mode: '0644'

    - name: Getting cluster status
      ansible.builtin.shell: |
        set -o pipefail
        kubectl cluster-info
        kubectl get nodes
      args:
        executable: /bin/bash
      become: false
      register: cluster_info
      changed_when: false
      ignore_errors: true

    - name: Displaying cluter info
      ansible.builtin.debug:
        msg: '{{ cluster_info.stdout }}'

  handlers:
    - name: Restart kubelet
      ansible.builtin.service:
        name: kubelet
        state: restarted
        daemon_reload: true

- name: Configure the nodes
  hosts: nodes
  become: true
  gather_facts: false
  tags: nodes
  tasks:
    - name: Preparing to join nodes to cluster
      run_once: true
      become: false
      block:
        - name: Retrieving master name and ip from inventory
          ansible.builtin.set_fact:
            master_hostname: "{{ hostvars[groups['master'][0]].inventory_hostname }}"
            master_ip: "{{ hostvars[groups['master'][0]].ansible_host }}"
          delegate_to: localhost

        - name: Retrieving the join command
          ansible.builtin.shell: |
            set -o pipefail
            kubeadm token create --print-join-command
          args:
            executable: /bin/bash
          delegate_to: '{{ master_hostname }}'
          register: kubeadm_join_command
          changed_when: false

        - name: Displaying the join command
          ansible.builtin.debug:
            msg: '{{ kubeadm_join_command.stdout }}'
          tags: never

        - name: Saving the tokens
          ansible.builtin.set_fact:
            token: '{{ kubeadm_join_command.stdout.split(" ")[4] }}'
            cert_hash: '{{ kubeadm_join_command.stdout.split(" ")[6] }}'

        - name: Displaying the tokens
          ansible.builtin.debug:
            msg: |
              Token: {{ token }}
              Discovery token cert hash: {{ cert_hash }}
          tags: never

    - name: Disabling apparmor service
      ansible.builtin.service:
        name: apparmor
        state: stopped
        enabled: false
        daemon_reload: true

    - name: Joining nodes to cluster
      ansible.builtin.shell: |
        set -o pipefail
        kubeadm join {{ master_ip }}:6443 --token {{ token }} --discovery-token-ca-cert-hash {{ cert_hash }}
      args:
        executable: /bin/bash
        creates: /etc/kubernetes/kubelet.conf
      register: node_status

    - name: Installing Flannel for networking
      ansible.builtin.shell: |
        set -o pipefail
        kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
      args:
        executable: /bin/bash
      become: false
      changed_when: false
      ignore_errors: true
      run_once: true
      delegate_to: '{{ master_hostname }}'

    - name: Displaying node status
      ansible.builtin.debug:
        msg: '{{ node_status.stdout }}'
...
# vim: ft=ansible:syntax=yaml.ansible:number:nowrap
